{"ast":null,"code":"import * as actionTypes from './globalActionTypes';\nimport * as utility from '../utility';\nexport const showAllMovies = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    searchTerm: '',\n    movieSummaries: searchResults.movieSummaries,\n    searchResultsTotal: searchResults.searchResultsTotal,\n    currentPage: 0\n  }\n});\nexport const updateSearchResults = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: 0,\n    searchTerm: searchResults.searchTerm,\n    searchResultsTotal: searchResults.searchResultsTotal\n  }\n});\nexport const updateCurrentPage = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: searchResults.currentPage\n  }\n});\nexport const updateRowsPerPage = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: 0,\n    rowsPerPage: searchResults.rowsPerPage\n  }\n});\nexport const updateResultsOrder = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: 0,\n    orderBy: searchResults.orderBy\n  }\n});\nexport const showMovie = movie => ({\n  type: actionTypes.TRIGGER_MOVIE,\n  newState: {\n    movieId: movie.id,\n    title: movie.title,\n    genres: movie.genres,\n    year: movie.year,\n    runtime: movie.runtime,\n    rating: movie.rating,\n    votes: movie.votes,\n    directors: movie.directors,\n    writers: movie.writers,\n    crew: movie.crew\n  }\n});\nexport const showCrew = crew => ({\n  type: actionTypes.TRIGGER_CREW,\n  newState: {\n    crewId: crew.crewId,\n    name: crew.name,\n    movies: crew.movies\n  }\n});\nexport const addToMovieSummaries = movie => ({\n  type: actionTypes.CREATE_CREW_MOVIE,\n  newState: {\n    newMovie: movie\n  }\n});\nexport const resetState = () => ({\n  type: actionTypes.RESET_STATE,\n  newState: {}\n}); // **********************************\n// ASYNC Functions\n// **********************************\n\nexport const allMovies = () => (dispatch, getState) => {\n  let {\n    searchTerm,\n    rowsPerPage\n  } = getState();\n  fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=rating&order=desc`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(showAllMovies({\n      movieSummaries: movieSummaries,\n      searchResultsTotal: apiResponse.total\n    }));\n  });\n};\nexport const searchMovies = searchTerm => (dispatch, getState) => {\n  fetch(`/movies?offset=0&size=10&query=${searchTerm}&sort=rating&order=desc`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateSearchResults({\n      movieSummaries: movieSummaries,\n      searchTerm: searchTerm,\n      searchResultsTotal: apiResponse.total\n    }));\n  });\n};\nexport const changePage = (event, newPage) => (dispatch, getState) => {\n  let {\n    searchTerm,\n    rowsPerPage,\n    orderBy\n  } = getState();\n  const offset = newPage * rowsPerPage;\n  fetch(`/movies?offset=${offset}&size=${rowsPerPage}&query=${searchTerm}&sort=${orderBy[0]}&order=${orderBy[1]}`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateCurrentPage({\n      movieSummaries: movieSummaries,\n      currentPage: newPage\n    }));\n  });\n};\nexport const changeRowsPerPage = event => (dispatch, getState) => {\n  const {\n    searchTerm\n  } = getState();\n  const rows = parseInt(event.target.value, 10);\n  fetch(`/movies?offset=0&size=${rows}&query=${searchTerm}&sort=rating&order=desc`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateRowsPerPage({\n      movieSummaries: movieSummaries,\n      rowsPerPage: rows\n    }));\n  });\n};\nexport const sortByTitleOrRating = (event, property) => (dispatch, getState) => {\n  const {\n    searchTerm,\n    rowsPerPage,\n    orderBy\n  } = getState();\n  console.log(\"Event \" + event.value);\n  orderBy[property].sort = orderBy[property].sort === 'asc' ? 'desc' : 'asc'; // if (property == 'rating') {\n  //     orderBy['title'].icon = UnfoldMore\n  // }\n  // else { orderBy['rating'].icon = UnfoldMore}\n  //\n  // orderBy[property].icon = ArrowDownward\n\n  fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=${property}&order=${orderBy[property].sort}`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateResultsOrder({\n      movieSummaries: movieSummaries,\n      orderBy: orderBy\n    }));\n  });\n};\nexport const findMovie = movie => (dispatch, getState) => {\n  fetch(`/movies/${movie}`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const directors = apiResponse.directors.map(({\n      id,\n      name,\n      movies\n    }) => ({\n      memberId: id,\n      name,\n      movies,\n      roles: ['director']\n    }));\n    const writers = apiResponse.writers.map(({\n      id,\n      name,\n      movies\n    }) => ({\n      memberId: id,\n      name,\n      movies,\n      roles: ['writer']\n    }));\n    let crew = {};\n\n    for (let d of directors) {\n      crew[d.memberId] = {\n        name: d.name,\n        movies: d.movies,\n        roles: ['director']\n      };\n    }\n\n    for (let w of writers) {\n      if (crew[w.memberId]) {\n        crew[w.memberId].roles.push('writer');\n      } else {\n        crew[w.memberId] = {\n          name: w.name,\n          movies: w.movies,\n          roles: ['writer']\n        };\n      }\n    } // let crew = [...new Set([...directors, ...writers])]\n    // const uniqueCrew : any = []\n    // for (let i in crew) {\n    //     let id = crew[i]['memberId']\n    //     uniqueCrew[id] = crew[i]\n    // }\n    // console.log(uniqueCrew)\n    // crew = []\n    // for (let i in uniqueCrew) {\n    //     crew.push(uniqueCrew[i])\n    // }\n\n\n    dispatch(showMovie({\n      movieId: apiResponse.id,\n      title: apiResponse.title,\n      genres: apiResponse.genres,\n      year: apiResponse.year,\n      runtime: apiResponse.runtime,\n      rating: apiResponse.rating,\n      votes: apiResponse.votes,\n      directors: directors,\n      writers: writers,\n      crew: crew\n    }));\n  });\n};\nexport const findCrew = crew => (dispatch, getState) => {\n  fetch(`/crew/${crew}`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    const movieIds = apiResponse.movies.map(({\n      id\n    }) => id);\n    movieIds.map(id => dispatch(findCrewMovie(id)));\n    dispatch(showCrew({\n      crewId: apiResponse.id,\n      name: apiResponse.name\n    }));\n  });\n};\nexport const findCrewMovie = movieId => (dispatch, getState) => {\n  console.log(movieId);\n  fetch(`/movies/${movieId}`).then(utility.handleFetchErrors).then(response => response.json()).then(apiResponse => {\n    console.log(\"apiresponse \" + apiResponse);\n    dispatch(addToMovieSummaries({\n      movieId: apiResponse.id,\n      title: apiResponse.title,\n      rating: apiResponse.rating,\n      runtime: apiResponse.runtime\n    }));\n  });\n};","map":{"version":3,"sources":["/Users/dkothandapani/Downloads/movie-app-react-typescript/src/store/actions/globalActions.tsx"],"names":["actionTypes","utility","showAllMovies","searchResults","type","TRIGGER_SEARCH","newState","searchTerm","movieSummaries","searchResultsTotal","currentPage","updateSearchResults","updateCurrentPage","updateRowsPerPage","rowsPerPage","updateResultsOrder","orderBy","showMovie","movie","TRIGGER_MOVIE","movieId","id","title","genres","year","runtime","rating","votes","directors","writers","crew","showCrew","TRIGGER_CREW","crewId","name","movies","addToMovieSummaries","CREATE_CREW_MOVIE","newMovie","resetState","RESET_STATE","allMovies","dispatch","getState","fetch","then","handleFetchErrors","response","json","apiResponse","items","map","total","searchMovies","changePage","event","newPage","offset","changeRowsPerPage","rows","parseInt","target","value","sortByTitleOrRating","property","console","log","sort","findMovie","memberId","roles","d","w","push","findCrew","movieIds","findCrewMovie"],"mappings":"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","sourcesContent":["import * as actionTypes from './globalActionTypes'\nimport * as utility from '../utility'\n\nexport const showAllMovies = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        searchTerm: '',\n        movieSummaries: searchResults.movieSummaries,\n        searchResultsTotal: searchResults.searchResultsTotal,\n        currentPage: 0\n    }\n})\n\nexport const updateSearchResults = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: 0,\n        searchTerm: searchResults.searchTerm,\n        searchResultsTotal: searchResults.searchResultsTotal,\n\n    }\n})\n\nexport const updateCurrentPage = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: searchResults.currentPage,\n    }\n})\n\nexport const updateRowsPerPage = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: 0,\n        rowsPerPage: searchResults.rowsPerPage\n    }\n})\n\nexport const updateResultsOrder = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: 0,\n        orderBy: searchResults.orderBy\n    }\n})\n\nexport const showMovie = (movie: any) => ({\n    type: actionTypes.TRIGGER_MOVIE,\n    newState: {\n        movieId: movie.id,\n        title: movie.title,\n        genres: movie.genres,\n        year: movie.year,\n        runtime: movie.runtime,\n        rating: movie.rating,\n        votes: movie.votes,\n        directors: movie.directors,\n        writers: movie.writers,\n        crew: movie.crew\n    }\n})\n\nexport const showCrew = (crew: any) => ({\n    type: actionTypes.TRIGGER_CREW,\n    newState: {\n        crewId: crew.crewId,\n        name: crew.name,\n        movies: crew.movies,\n    }\n})\n\nexport const addToMovieSummaries = (movie: any) => ({\n    type: actionTypes.CREATE_CREW_MOVIE,\n    newState: {\n        newMovie: movie\n    }\n})\n\nexport const resetState = () => ({\n    type: actionTypes.RESET_STATE,\n    newState: {}\n\n})\n\n// **********************************\n// ASYNC Functions\n// **********************************\n\nexport const allMovies = () => (dispatch: any, getState: any) => {\n    let {searchTerm, rowsPerPage} = getState()\n    fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=rating&order=desc`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(showAllMovies({\n                movieSummaries: movieSummaries,\n                searchResultsTotal: apiResponse.total\n            }));\n        })\n}\n\nexport const searchMovies = (searchTerm: string) => (dispatch: any, getState: any) => {\n\n    fetch(`/movies?offset=0&size=10&query=${searchTerm}&sort=rating&order=desc`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateSearchResults({\n                movieSummaries: movieSummaries,\n                searchTerm: searchTerm,\n                searchResultsTotal: apiResponse.total\n            }));\n        })\n}\n\nexport const changePage = (event: any, newPage: number) => (dispatch: any, getState: any) => {\n    let {searchTerm, rowsPerPage, orderBy} = getState()\n    const offset = newPage * rowsPerPage\n\n    fetch(`/movies?offset=${offset}&size=${rowsPerPage}&query=${searchTerm}&sort=${orderBy[0]}&order=${orderBy[1]}`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateCurrentPage({\n                movieSummaries: movieSummaries,\n                currentPage: newPage,\n            }));\n        })\n}\n\nexport const changeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => (dispatch: any, getState: any) => {\n    const {searchTerm} = getState()\n    const rows = parseInt(event.target.value, 10)\n\n    fetch(`/movies?offset=0&size=${rows}&query=${searchTerm}&sort=rating&order=desc`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateRowsPerPage({\n                movieSummaries: movieSummaries,\n                rowsPerPage: rows\n            }));\n        })\n}\n\nexport const sortByTitleOrRating = (event: any, property: any) => (dispatch: any, getState: any) => {\n    const {searchTerm, rowsPerPage, orderBy} = getState()\n    console.log(\"Event \" + event.value)\n\n\n    orderBy[property].sort = orderBy[property].sort === 'asc' ? 'desc' : 'asc'\n\n    // if (property == 'rating') {\n    //     orderBy['title'].icon = UnfoldMore\n    // }\n    // else { orderBy['rating'].icon = UnfoldMore}\n    //\n    // orderBy[property].icon = ArrowDownward\n\n    fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=${property}&order=${orderBy[property].sort}`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateResultsOrder({\n                movieSummaries: movieSummaries,\n                orderBy: orderBy\n            }));\n        })\n}\n\nexport const findMovie = (movie: string) => (dispatch: any, getState: any) => {\n\n    fetch(`/movies/${movie}`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n\n                const directors = apiResponse.directors.map(({id, name, movies}: any) => ({\n                    memberId: id,\n                    name,\n                    movies,\n                    roles: ['director']\n                }))\n                const writers = apiResponse.writers.map(({id, name, movies}: any) => ({\n                    memberId: id,\n                    name,\n                    movies,\n                    roles: ['writer']\n                }))\n\n                let crew: any = {}\n                for (let d of directors) {\n                    crew[d.memberId] = {name: d.name, movies: d.movies, roles: ['director']}\n                }\n\n                for (let w of writers) {\n                    if (crew[w.memberId]) {\n                        crew[w.memberId].roles.push('writer')\n                    } else {\n                        crew[w.memberId] = {name: w.name, movies: w.movies, roles: ['writer']}\n                    }\n\n                }\n                // let crew = [...new Set([...directors, ...writers])]\n                // const uniqueCrew : any = []\n                // for (let i in crew) {\n                //     let id = crew[i]['memberId']\n                //     uniqueCrew[id] = crew[i]\n                // }\n                // console.log(uniqueCrew)\n                // crew = []\n                // for (let i in uniqueCrew) {\n                //     crew.push(uniqueCrew[i])\n                // }\n\n                dispatch(showMovie({\n                    movieId: apiResponse.id,\n                    title: apiResponse.title,\n                    genres: apiResponse.genres,\n                    year: apiResponse.year,\n                    runtime: apiResponse.runtime,\n                    rating: apiResponse.rating,\n                    votes: apiResponse.votes,\n                    directors: directors,\n                    writers: writers,\n                    crew: crew\n                }));\n            }\n        )\n}\n\nexport const findCrew = (crew: string) => (dispatch: any, getState: any) => {\n\n    fetch(`/crew/${crew}`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const movieIds = apiResponse.movies.map(({id}: any) => (id))\n            movieIds.map((id: any) => dispatch(findCrewMovie(id)))\n            dispatch(showCrew({\n                crewId: apiResponse.id,\n                name: apiResponse.name,\n            }));\n        })\n}\n\nexport const findCrewMovie = (movieId: any) => (dispatch: any, getState: any) => {\n    console.log(movieId)\n\n    fetch(`/movies/${movieId}`)\n        .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            console.log(\"apiresponse \" + apiResponse)\n            dispatch(addToMovieSummaries({\n                movieId: apiResponse.id,\n                title: apiResponse.title,\n                rating: apiResponse.rating,\n                runtime: apiResponse.runtime\n            }));\n        })\n}\n\n"]},"metadata":{},"sourceType":"module"}