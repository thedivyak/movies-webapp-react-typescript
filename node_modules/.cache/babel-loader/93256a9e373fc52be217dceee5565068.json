{"ast":null,"code":"import * as actionTypes from './globalActionTypes';\nexport const APIfailure = () => ({\n  type: actionTypes.API_FAILURE,\n  newState: {\n    errorMessage: 'Uh Oh! We could not reach the server at this moment. Please ensure the API server is running.',\n    apiError: true\n  }\n});\nexport const showAllMovies = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    searchTerm: '',\n    movieSummaries: searchResults.movieSummaries,\n    searchResultsTotal: searchResults.searchResultsTotal,\n    currentPage: 0\n  }\n});\nexport const updateSearchResults = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: 0,\n    searchTerm: searchResults.searchTerm,\n    searchResultsTotal: searchResults.searchResultsTotal\n  }\n});\nexport const updateCurrentPage = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: searchResults.currentPage\n  }\n});\nexport const updateRowsPerPage = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: 0,\n    rowsPerPage: searchResults.rowsPerPage\n  }\n});\nexport const updateResultsOrder = searchResults => ({\n  type: actionTypes.TRIGGER_SEARCH,\n  newState: {\n    movieSummaries: searchResults.movieSummaries,\n    currentPage: 0,\n    orderBy: searchResults.orderBy\n  }\n});\nexport const showMovie = movie => ({\n  type: actionTypes.TRIGGER_MOVIE,\n  newState: {\n    movieId: movie.id,\n    title: movie.title,\n    genres: movie.genres,\n    year: movie.year,\n    runtime: movie.runtime,\n    rating: movie.rating,\n    votes: movie.votes,\n    directors: movie.directors,\n    writers: movie.writers,\n    crew: movie.crew\n  }\n});\nexport const showCrew = crew => ({\n  type: actionTypes.TRIGGER_CREW,\n  newState: {\n    crewId: crew.crewId,\n    name: crew.name,\n    movies: crew.movies\n  }\n});\nexport const addToMovieSummaries = movie => ({\n  type: actionTypes.CREATE_CREW_MOVIE,\n  newState: {\n    newMovie: movie\n  }\n});\nexport const resetState = () => ({\n  type: actionTypes.RESET_STATE,\n  newState: {}\n}); // **********************************\n// ASYNC Functions\n// **********************************\n\nexport const allMovies = () => (dispatch, getState) => {\n  let {\n    searchTerm,\n    rowsPerPage\n  } = getState();\n  fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=rating&order=desc`) // .then(utility.handleFetchErrors)\n  .then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime,\n      genres,\n      directors,\n      writers\n    }) => {\n      let crew = new Set();\n\n      for (let d of directors) {\n        crew.add(d.name);\n      }\n\n      for (let w of writers) {\n        crew.add(w.name);\n      }\n\n      return {\n        movieId: id,\n        title,\n        rating,\n        runtime,\n        genres: genres,\n        crew: Array.from(crew)\n      };\n    });\n    dispatch(showAllMovies({\n      movieSummaries: movieSummaries,\n      searchResultsTotal: apiResponse.total\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const searchMovies = searchTerm => (dispatch, getState) => {\n  fetch(`/movies?offset=0&size=10&query=${searchTerm}&sort=rating&order=desc`).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateSearchResults({\n      movieSummaries: movieSummaries,\n      searchTerm: searchTerm,\n      searchResultsTotal: apiResponse.total\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const changePage = (event, newPage) => (dispatch, getState) => {\n  let {\n    searchTerm,\n    rowsPerPage,\n    orderBy\n  } = getState();\n  const offset = newPage * rowsPerPage;\n  fetch(`/movies?offset=${offset}&size=${rowsPerPage}&query=${searchTerm}&sort=${orderBy[0]}&order=${orderBy[1]}`).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateCurrentPage({\n      movieSummaries: movieSummaries,\n      currentPage: newPage\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const changeRowsPerPage = event => (dispatch, getState) => {\n  const {\n    searchTerm\n  } = getState();\n  const rows = parseInt(event.target.value, 10);\n  fetch(`/movies?offset=0&size=${rows}&query=${searchTerm}&sort=rating&order=desc`).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateRowsPerPage({\n      movieSummaries: movieSummaries,\n      rowsPerPage: rows\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const sortByTitleOrRating = (event, property) => (dispatch, getState) => {\n  const {\n    searchTerm,\n    rowsPerPage,\n    orderBy\n  } = getState();\n  orderBy[property].sort = orderBy[property].sort === 'asc' ? 'desc' : 'asc';\n  fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=${property}&order=${orderBy[property].sort}`).then(response => response.json()).then(apiResponse => {\n    const allMovies = apiResponse.items;\n    const movieSummaries = allMovies.map(({\n      id,\n      title,\n      rating,\n      runtime\n    }) => ({\n      movieId: id,\n      title,\n      rating,\n      runtime\n    }));\n    dispatch(updateResultsOrder({\n      movieSummaries: movieSummaries,\n      orderBy: orderBy\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const findMovie = movie => (dispatch, getState) => {\n  fetch(`/movies/${movie}`).then(response => response.json()).then(apiResponse => {\n    const directors = apiResponse.directors.map(({\n      id,\n      name,\n      movies\n    }) => ({\n      memberId: id,\n      name,\n      movies,\n      roles: ['director']\n    }));\n    const writers = apiResponse.writers.map(({\n      id,\n      name,\n      movies\n    }) => ({\n      memberId: id,\n      name,\n      movies,\n      roles: ['writer']\n    }));\n    let crew = {};\n\n    for (let d of directors) {\n      crew[d.memberId] = {\n        name: d.name,\n        movies: d.movies,\n        roles: ['director']\n      };\n    }\n\n    for (let w of writers) {\n      if (crew[w.memberId]) {\n        crew[w.memberId].roles.push('writer');\n      } else {\n        crew[w.memberId] = {\n          name: w.name,\n          movies: w.movies,\n          roles: ['writer']\n        };\n      }\n    }\n\n    dispatch(showMovie({\n      movieId: apiResponse.id,\n      title: apiResponse.title,\n      genres: apiResponse.genres,\n      year: apiResponse.year,\n      runtime: apiResponse.runtime,\n      rating: apiResponse.rating,\n      votes: apiResponse.votes,\n      directors: directors,\n      writers: writers,\n      crew: crew\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const findCrew = crew => (dispatch, getState) => {\n  fetch(`/crew/${crew}`).then(response => response.json()).then(apiResponse => {\n    const movieIds = apiResponse.movies.map(({\n      id\n    }) => id);\n    movieIds.map(id => dispatch(findCrewMovie(id)));\n    dispatch(showCrew({\n      crewId: apiResponse.id,\n      name: apiResponse.name\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};\nexport const findCrewMovie = movieId => (dispatch, getState) => {\n  console.log(movieId);\n  fetch(`/movies/${movieId}`).then(response => response.json()).then(apiResponse => {\n    console.log(\"apiresponse \" + apiResponse);\n    dispatch(addToMovieSummaries({\n      movieId: apiResponse.id,\n      title: apiResponse.title,\n      rating: apiResponse.rating,\n      runtime: apiResponse.runtime\n    }));\n  }).catch(ex => dispatch(APIfailure()));\n};","map":{"version":3,"sources":["/Users/dkothandapani/Downloads/movie-app-react-typescript/src/store/actions/globalActions.tsx"],"names":["actionTypes","APIfailure","type","API_FAILURE","newState","errorMessage","apiError","showAllMovies","searchResults","TRIGGER_SEARCH","searchTerm","movieSummaries","searchResultsTotal","currentPage","updateSearchResults","updateCurrentPage","updateRowsPerPage","rowsPerPage","updateResultsOrder","orderBy","showMovie","movie","TRIGGER_MOVIE","movieId","id","title","genres","year","runtime","rating","votes","directors","writers","crew","showCrew","TRIGGER_CREW","crewId","name","movies","addToMovieSummaries","CREATE_CREW_MOVIE","newMovie","resetState","RESET_STATE","allMovies","dispatch","getState","fetch","then","response","json","apiResponse","items","map","Set","d","add","w","Array","from","total","catch","ex","searchMovies","changePage","event","newPage","offset","changeRowsPerPage","rows","parseInt","target","value","sortByTitleOrRating","property","sort","findMovie","memberId","roles","push","findCrew","movieIds","findCrewMovie","console","log"],"mappings":"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","sourcesContent":["import * as actionTypes from './globalActionTypes'\nimport * as utility from '../utility'\n\nexport const APIfailure = () => ({\n    type: actionTypes.API_FAILURE,\n    newState: {\n        errorMessage: 'Uh Oh! We could not reach the server at this moment. Please ensure the API server is running.',\n        apiError: true,\n    }\n})\n\nexport const showAllMovies = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        searchTerm: '',\n        movieSummaries: searchResults.movieSummaries,\n        searchResultsTotal: searchResults.searchResultsTotal,\n        currentPage: 0\n    }\n})\n\nexport const updateSearchResults = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: 0,\n        searchTerm: searchResults.searchTerm,\n        searchResultsTotal: searchResults.searchResultsTotal,\n\n    }\n})\n\nexport const updateCurrentPage = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: searchResults.currentPage,\n    }\n})\n\nexport const updateRowsPerPage = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: 0,\n        rowsPerPage: searchResults.rowsPerPage\n    }\n})\n\nexport const updateResultsOrder = (searchResults: any) => ({\n    type: actionTypes.TRIGGER_SEARCH,\n    newState: {\n        movieSummaries: searchResults.movieSummaries,\n        currentPage: 0,\n        orderBy: searchResults.orderBy\n    }\n})\n\nexport const showMovie = (movie: any) => ({\n    type: actionTypes.TRIGGER_MOVIE,\n    newState: {\n        movieId: movie.id,\n        title: movie.title,\n        genres: movie.genres,\n        year: movie.year,\n        runtime: movie.runtime,\n        rating: movie.rating,\n        votes: movie.votes,\n        directors: movie.directors,\n        writers: movie.writers,\n        crew: movie.crew\n    }\n})\n\nexport const showCrew = (crew: any) => ({\n    type: actionTypes.TRIGGER_CREW,\n    newState: {\n        crewId: crew.crewId,\n        name: crew.name,\n        movies: crew.movies,\n    }\n})\n\nexport const addToMovieSummaries = (movie: any) => ({\n    type: actionTypes.CREATE_CREW_MOVIE,\n    newState: {\n        newMovie: movie\n    }\n})\n\nexport const resetState = () => ({\n    type: actionTypes.RESET_STATE,\n    newState: {}\n\n})\n\n// **********************************\n// ASYNC Functions\n// **********************************\n\nexport const allMovies = () => (dispatch: any, getState: any) => {\n    let {searchTerm, rowsPerPage} = getState()\n    fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=rating&order=desc`)\n    // .then(utility.handleFetchErrors)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime, genres, directors, writers}: any) => {\n                    let crew = new Set()\n                    for (let d of directors) {\n                        crew.add(d.name)\n                    }\n                    for (let w of writers) {\n                        crew.add(w.name)\n                    }\n                    return {movieId: id, title, rating, runtime, genres: genres, crew: Array.from(crew)}\n                }\n            )\n            dispatch(showAllMovies({\n                movieSummaries: movieSummaries,\n                searchResultsTotal: apiResponse.total\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const searchMovies = (searchTerm: string) => (dispatch: any, getState: any) => {\n\n    fetch(`/movies?offset=0&size=10&query=${searchTerm}&sort=rating&order=desc`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateSearchResults({\n                movieSummaries: movieSummaries,\n                searchTerm: searchTerm,\n                searchResultsTotal: apiResponse.total\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const changePage = (event: any, newPage: number) => (dispatch: any, getState: any) => {\n    let {searchTerm, rowsPerPage, orderBy} = getState()\n    const offset = newPage * rowsPerPage\n\n    fetch(`/movies?offset=${offset}&size=${rowsPerPage}&query=${searchTerm}&sort=${orderBy[0]}&order=${orderBy[1]}`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateCurrentPage({\n                movieSummaries: movieSummaries,\n                currentPage: newPage,\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const changeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => (dispatch: any, getState: any) => {\n    const {searchTerm} = getState()\n    const rows = parseInt(event.target.value, 10)\n\n    fetch(`/movies?offset=0&size=${rows}&query=${searchTerm}&sort=rating&order=desc`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateRowsPerPage({\n                movieSummaries: movieSummaries,\n                rowsPerPage: rows\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const sortByTitleOrRating = (event: any, property: any) => (dispatch: any, getState: any) => {\n    const {searchTerm, rowsPerPage, orderBy} = getState()\n    orderBy[property].sort = orderBy[property].sort === 'asc' ? 'desc' : 'asc'\n\n    fetch(`/movies?offset=0&size=${rowsPerPage}&query=${searchTerm}&sort=${property}&order=${orderBy[property].sort}`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const allMovies = apiResponse.items\n            const movieSummaries = allMovies.map(\n                ({id, title, rating, runtime}: any) => ({movieId: id, title, rating, runtime})\n            )\n            dispatch(updateResultsOrder({\n                movieSummaries: movieSummaries,\n                orderBy: orderBy\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const findMovie = (movie: string) => (dispatch: any, getState: any) => {\n\n    fetch(`/movies/${movie}`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n\n                const directors = apiResponse.directors.map(({id, name, movies}: any) => ({\n                    memberId: id,\n                    name,\n                    movies,\n                    roles: ['director']\n                }))\n                const writers = apiResponse.writers.map(({id, name, movies}: any) => ({\n                    memberId: id,\n                    name,\n                    movies,\n                    roles: ['writer']\n                }))\n\n                let crew: any = {}\n                for (let d of directors) {\n                    crew[d.memberId] = {name: d.name, movies: d.movies, roles: ['director']}\n                }\n\n                for (let w of writers) {\n                    if (crew[w.memberId]) {\n                        crew[w.memberId].roles.push('writer')\n                    } else {\n                        crew[w.memberId] = {name: w.name, movies: w.movies, roles: ['writer']}\n                    }\n\n                }\n\n                dispatch(showMovie({\n                    movieId: apiResponse.id,\n                    title: apiResponse.title,\n                    genres: apiResponse.genres,\n                    year: apiResponse.year,\n                    runtime: apiResponse.runtime,\n                    rating: apiResponse.rating,\n                    votes: apiResponse.votes,\n                    directors: directors,\n                    writers: writers,\n                    crew: crew\n                }));\n            }\n        )\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const findCrew = (crew: string) => (dispatch: any, getState: any) => {\n\n    fetch(`/crew/${crew}`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            const movieIds = apiResponse.movies.map(({id}: any) => (id))\n            movieIds.map((id: any) => dispatch(findCrewMovie(id)))\n            dispatch(showCrew({\n                crewId: apiResponse.id,\n                name: apiResponse.name,\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\nexport const findCrewMovie = (movieId: any) => (dispatch: any, getState: any) => {\n    console.log(movieId)\n\n    fetch(`/movies/${movieId}`)\n        .then((response) => response.json())\n        .then(apiResponse => {\n            console.log(\"apiresponse \" + apiResponse)\n            dispatch(addToMovieSummaries({\n                movieId: apiResponse.id,\n                title: apiResponse.title,\n                rating: apiResponse.rating,\n                runtime: apiResponse.runtime\n            }));\n        })\n        .catch(ex => dispatch(APIfailure()))\n}\n\n"]},"metadata":{},"sourceType":"module"}